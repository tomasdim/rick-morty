{"version":3,"sources":["components/card/Card.js","firebase.js","redux/charsDuck.js","components/home/HomePage.js","components/favs/FavPage.js","redux/userDuck.js","components/login/LoginPage.js","Routes.js","App.js","serviceWorker.js","redux/store.js","index.js","components/card/card.module.css","components/home/home.module.css","components/favs/favs.module.css","components/login/login.module.css"],"names":["onClick","side","console","log","Card","name","image","rightClick","leftClick","hide","className","styles","container","card","alt","src","actions","left","size","right","defaultProps","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","collection","initialData","fetching","array","current","favorites","nextPage","client","ApolloClient","uri","UPDATE_PAGE","GET_CHARACTERS","GET_CHARACTERS_SUCCESS","GET_CHARACTERS_ERROR","REMOVE_CHARACTER","ADD_TO_FAVORITES","GET_FAVS","GET_FAVS_SUCCESS","GET_FAVS_ERROR","retrieveFavs","dispatch","getState","type","uid","doc","get","then","snap","data","getFavs","user","payload","catch","e","message","getCharactersAction","query","gql","characters","variables","page","error","results","info","next","connect","state","chars","addToFavoritesAction","char","shift","push","set","updateDB","removeCharacterAction","length","nextCharacter","addFav","renderCharacter","favs","map","i","key","loggedIn","LOGIN","LOGIN_SUCCESS","LOGIN_ERROR","LOG_OUT","doGoogleLoginAction","provider","auth","GoogleAuthProvider","signInWithPopup","loginWithGoogle","storage","displayName","email","photoURL","localStorage","JSON","stringify","logOutAction","signOut","removeItem","PrivateRoute","path","component","rest","getItem","parse","to","Routes","exact","Home","FavPage","LoginPage","App","activeClassName","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","restoreSessionAction","generateStore","WithRouter","WithStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.4c062b1d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styles from \"./card.module.css\";\r\nimport FontAwesome from \"react-fontawesome\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nlet rick = \"https://rickandmortyapi.com/api/character/avatar/1.jpeg\";\r\n\r\nfunction onClick(side) {\r\n  return () => console.log(side);\r\n}\r\n\r\nexport default function Card({ name, image, rightClick, leftClick, hide }) {\r\n  return (\r\n    <div className={styles.container}>\r\n      <div className={styles.card}>\r\n        <img alt=\"rick\" src={image} />\r\n        <p className={styles.name}>{name}</p>\r\n        {!hide && (\r\n          <div className={styles.actions}>\r\n            <div onClick={leftClick || onClick(\"left\")} className={styles.left}>\r\n              <FontAwesome name=\"thumbs-down\" size=\"2x\" />\r\n            </div>\r\n            <div\r\n              onClick={rightClick || onClick(\"right\")}\r\n              className={styles.right}\r\n            >\r\n              <FontAwesome name=\"heart\" size=\"2x\" />\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nCard.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  image: PropTypes.string.isRequired,\r\n  leftClick: PropTypes.func,\r\n  rightClick: PropTypes.func,\r\n};\r\n\r\nCard.defaultProps = {\r\n  name: \"Rick Sanches\",\r\n  image: rick,\r\n};\r\n","import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nlet firebaseConfig = {\r\n  apiKey: \"AIzaSyBSZTohkYDgpPL6jHZwisU7CO2QipLdRmI\",\r\n  authDomain: \"cursoredux-2bc60.firebaseapp.com\",\r\n  projectId: \"cursoredux-2bc60\",\r\n  storageBucket: \"cursoredux-2bc60.appspot.com\",\r\n  messagingSenderId: \"747418231846\",\r\n  appId: \"1:747418231846:web:dbc2cfddae401a7e86f2e7\",\r\n  measurementId: \"G-DMB56C6N34\",\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nlet db = firebase.firestore().collection(\"favs\");\r\n\r\nexport function getFavs(uid) {\r\n  return db\r\n    .doc(uid)\r\n    .get()\r\n    .then((snap) => {\r\n      return snap.data().array;\r\n    });\r\n}\r\n\r\nexport function updateDB(array, uid) {\r\n  return db.doc(uid).set({ array });\r\n}\r\n//   firebase.analytics();\r\n\r\nexport function signOutGoogle() {\r\n  firebase.auth().signOut();\r\n}\r\n\r\nexport function loginWithGoogle() {\r\n  let provider = new firebase.auth.GoogleAuthProvider();\r\n  return firebase\r\n    .auth()\r\n    .signInWithPopup(provider)\r\n    .then((snap) => snap.user);\r\n}\r\n","import axios from \"axios\";\r\nimport { updateDB, getFavs } from \"../firebase\";\r\nimport ApolloClient, { gql } from \"apollo-boost\";\r\n\r\n// constants\r\nlet initialData = {\r\n  fetching: false,\r\n  array: [],\r\n  current: {},\r\n  favorites: [],\r\n  nextPage: 1,\r\n};\r\nlet URL = \"https://rickandmortyapi.com/api/character\";\r\n\r\nlet client = new ApolloClient({\r\n  uri: \"https://rickandmortyapi.com/graphql\",\r\n});\r\n\r\nlet UPDATE_PAGE = \"UPDATE_PAGE\";\r\n\r\nlet GET_CHARACTERS = \"GET_CHARACTERS\";\r\nlet GET_CHARACTERS_SUCCESS = \"GET_CHARACTERS_SUCCESS\";\r\nlet GET_CHARACTERS_ERROR = \"GET_CHARACTERS_ERROR\";\r\n\r\nlet REMOVE_CHARACTER = \"REMOVE_CHARACTER\";\r\nlet ADD_TO_FAVORITES = \"ADD_TO_FAVORITES\";\r\n\r\nlet GET_FAVS = \"GET_FAVS\";\r\nlet GET_FAVS_SUCCESS = \"GET_FAVS_SUCCESS\";\r\nlet GET_FAVS_ERROR = \"GET_FAVS_ERROR\";\r\n\r\n// reducer\r\nexport default function reducer(state = initialData, action) {\r\n  switch (action.type) {\r\n    case UPDATE_PAGE:\r\n      return { ...state, nextPage: action.payload };\r\n    case GET_FAVS_SUCCESS:\r\n      return { ...state, fetching: false, favorites: action.payload };\r\n    case GET_FAVS_ERROR:\r\n      return { ...state, fetching: false, error: action.payload };\r\n    case GET_FAVS:\r\n      return { ...state, fetching: true };\r\n    case ADD_TO_FAVORITES:\r\n      return { ...state, ...action.payload };\r\n    case REMOVE_CHARACTER:\r\n      return { ...state, array: action.payload };\r\n\r\n    case GET_CHARACTERS:\r\n      return { ...state, fetching: true };\r\n    case GET_CHARACTERS_SUCCESS:\r\n      return { ...state, array: action.payload, fetching: false };\r\n    case GET_CHARACTERS_ERROR:\r\n      return { ...state, fetching: false, error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// actions (thunks)\r\nexport let retrieveFavs = () => (dispatch, getState) => {\r\n  dispatch({\r\n    type: GET_FAVS,\r\n  });\r\n  let { uid } = getState().user;\r\n  return getFavs(uid)\r\n    .then((array) => {\r\n      dispatch({\r\n        type: GET_FAVS_SUCCESS,\r\n        payload: [...array],\r\n      });\r\n    })\r\n    .catch((e) => {\r\n      console.log(e);\r\n      dispatch({\r\n        type: GET_FAVS_ERROR,\r\n        payload: e.message,\r\n      });\r\n    });\r\n};\r\n\r\nexport let addToFavoritesAction = () => (dispatch, getState) => {\r\n  let { array, favorites } = getState().characters;\r\n  let { uid } = getState().user;\r\n  let char = array.shift();\r\n  favorites.push(char);\r\n  updateDB(favorites, uid);\r\n  dispatch({\r\n    type: ADD_TO_FAVORITES,\r\n    payload: { array: [...array], favorites: [...favorites] },\r\n  });\r\n};\r\n\r\nexport let removeCharacterAction = () => (dispatch, getState) => {\r\n  let { array } = getState().characters;\r\n  array.shift();\r\n  if (!array.length) {\r\n    getCharactersAction()(dispatch, getState);\r\n    return;\r\n  }\r\n  dispatch({\r\n    type: REMOVE_CHARACTER,\r\n    payload: [...array],\r\n  });\r\n};\r\n\r\nexport let getCharactersAction = () => (dispatch, getState) => {\r\n  let query = gql`\r\n    query ($page: Int) {\r\n      characters(page: $page) {\r\n        info {\r\n          pages\r\n          next\r\n          prev\r\n        }\r\n        results {\r\n          name\r\n          image\r\n        }\r\n      }\r\n    }\r\n  `;\r\n  dispatch({\r\n    type: GET_CHARACTERS,\r\n  });\r\n  let { nextPage } = getState().characters;\r\n  return client\r\n    .query({\r\n      query,\r\n      variables: { page: nextPage },\r\n    })\r\n    .then(({ data, error }) => {\r\n      if (error) {\r\n        dispatch({\r\n          type: GET_CHARACTERS_ERROR,\r\n          payload: error,\r\n        });\r\n        return;\r\n      }\r\n      dispatch({\r\n        type: GET_CHARACTERS_SUCCESS,\r\n        payload: data.characters.results,\r\n      });\r\n      dispatch({\r\n        type: UPDATE_PAGE,\r\n        payload: data.characters.info.next ? data.characters.info.next : 1,\r\n      });\r\n    });\r\n\r\n  //     dispatch({\r\n  //         type: GET_CHARACTERS\r\n  //     })\r\n  //     return axios.get(URL)\r\n  //     .then(res => {\r\n  //         dispatch({\r\n  //             type: GET_CHARACTERS_SUCCESS,\r\n  //             payload: res.data.results\r\n  //         })\r\n  //     })\r\n  //     .catch(err=>{\r\n  //         console.log(err)\r\n  //         dispatch({\r\n  //             type: GET_CHARACTERS_ERROR,\r\n  //             payload: err.response.message\r\n  //         })\r\n  //     })\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Card from \"../card/Card\";\r\nimport styles from \"./home.module.css\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  removeCharacterAction,\r\n  addToFavoritesAction,\r\n} from \"../../redux/charsDuck\";\r\n\r\nfunction Home({ addToFavoritesAction, chars, removeCharacterAction }) {\r\n  function renderCharacter() {\r\n    let char = chars[0];\r\n    return <Card rightClick={addFav} leftClick={nextCharacter} {...char} />;\r\n  }\r\n\r\n  function nextCharacter() {\r\n    removeCharacterAction();\r\n  }\r\n\r\n  function addFav() {\r\n    addToFavoritesAction();\r\n  }\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <h2>Personajes de Rick y Morty</h2>\r\n      <div>{renderCharacter()}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction mapState(state) {\r\n  return {\r\n    chars: state.characters.array,\r\n  };\r\n}\r\n\r\nexport default connect(mapState, {\r\n  addToFavoritesAction,\r\n  removeCharacterAction,\r\n})(Home);\r\n","import React from \"react\";\r\nimport styles from \"./favs.module.css\";\r\nimport Card from \"../card/Card\";\r\nimport { connect } from \"react-redux\";\r\n\r\nfunction FavPage({ favs, characters = [0] }) {\r\n  function renderCharacter(char, i) {\r\n    return <Card hide {...char} key={i} />;\r\n  }\r\n  return (\r\n    <div className={styles.container}>\r\n      <h2>Favoritos</h2>\r\n      {characters.map(renderCharacter)}\r\n      {!characters.length && <h3>No hay personajes agregados</h3>}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction mapState({ characters }) {\r\n  return {\r\n    characters: characters.favorites,\r\n  };\r\n}\r\n\r\nexport default connect(mapState)(FavPage);\r\n","import { loginWithGoogle, signOutGoogle } from \"../firebase\";\r\nimport { retrieveFavs } from \"./charsDuck\";\r\n// constants\r\nlet initialData = {\r\n  loggedIn: false,\r\n  fetching: false,\r\n};\r\nlet LOGIN = \"LOGIN\";\r\nlet LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\r\nlet LOGIN_ERROR = \"LOGIN_ERROR\";\r\n\r\nlet LOG_OUT = \"LOG_OUT\";\r\n\r\n// reducer\r\nexport default function reducer(state = initialData, action) {\r\n  switch (action.type) {\r\n    case LOG_OUT:\r\n      return { ...initialData };\r\n    case LOGIN_SUCCESS:\r\n      return { ...state, fetching: false, ...action.payload, loggedIn: true };\r\n    case LOGIN_ERROR:\r\n      return { ...state, fetching: false, error: action.payload };\r\n    case LOGIN:\r\n      return { ...state, fetching: true };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// aux\r\nfunction saveStorage(storage) {\r\n  localStorage.storage = JSON.stringify(storage);\r\n}\r\n\r\n// action (action creates)\r\nexport let logOutAction = () => (dispatch, getState) => {\r\n  signOutGoogle();\r\n  dispatch({\r\n    type: LOG_OUT,\r\n  });\r\n  localStorage.removeItem(\"storage\");\r\n};\r\n\r\nexport let restoreSessionAction = () => (dispatch) => {\r\n  let storage = localStorage.getItem(\"storage\");\r\n  storage = JSON.parse(storage);\r\n  if (storage && storage.user) {\r\n    dispatch({\r\n      type: LOGIN_SUCCESS,\r\n      payload: storage.user,\r\n    });\r\n  }\r\n};\r\n\r\nexport let doGoogleLoginAction = () => (dispatch, getState) => {\r\n  dispatch({\r\n    type: LOGIN,\r\n  });\r\n  return loginWithGoogle()\r\n    .then((user) => {\r\n      dispatch({\r\n        type: LOGIN_SUCCESS,\r\n        payload: {\r\n          uid: user.uid,\r\n          displayName: user.displayName,\r\n          email: user.email,\r\n          photoURL: user.photoURL,\r\n        },\r\n      });\r\n      saveStorage(getState());\r\n      retrieveFavs()(dispatch, getState);\r\n    })\r\n    .catch((e) => {\r\n      console.log(e);\r\n      dispatch({\r\n        type: LOGIN_ERROR,\r\n        payload: e.message,\r\n      });\r\n    });\r\n};\r\n","import React from \"react\";\r\nimport styles from \"./login.module.css\";\r\nimport { connect } from \"react-redux\";\r\nimport { doGoogleLoginAction, logOutAction } from \"../../redux/userDuck\";\r\n\r\nfunction LoginPage({ logOutAction, loggedIn, fetching, doGoogleLoginAction }) {\r\n  function doLogin() {\r\n    doGoogleLoginAction();\r\n  }\r\n\r\n  function logOut() {\r\n    logOutAction();\r\n  }\r\n\r\n  if (fetching) return <h2>Cargando...</h2>;\r\n  return (\r\n    <div className={styles.container}>\r\n      {loggedIn ? <h1>Cierra tu sesión</h1> : <h1>Inicia Sesión con Google</h1>}\r\n\r\n      {loggedIn ? (\r\n        <button onClick={logOut}>Cerrar Sesión</button>\r\n      ) : (\r\n        <button onClick={doLogin}>Iniciar</button>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction mapState({ user: { fetching, loggedIn } }) {\r\n  return {\r\n    fetching,\r\n    loggedIn,\r\n  };\r\n}\r\n\r\nexport default connect(mapState, { doGoogleLoginAction, logOutAction })(\r\n  LoginPage\r\n);\r\n","import React from \"react\";\r\nimport { Switch, Route, Redirect } from \"react-router-dom\";\r\nimport Home from \"./components/home/HomePage\";\r\nimport FavPage from \"./components/favs/FavPage\";\r\nimport LoginPage from \"./components/login/LoginPage\";\r\nimport GraphHome from \"./components/home/GraphHome\";\r\n\r\nfunction PrivateRoute({ path, component, ...rest }) {\r\n  let storage = localStorage.getItem(\"storage\");\r\n  storage = JSON.parse(storage);\r\n  if (storage && storage.user) {\r\n    return <Route path={path} component={component} {...rest} />;\r\n  } else {\r\n    return <Redirect to=\"/login\" {...rest} />;\r\n  }\r\n}\r\n\r\nexport default function Routes() {\r\n  return (\r\n    <Switch>\r\n      <PrivateRoute exact path=\"/\" component={Home} />\r\n      <PrivateRoute path=\"/favs\" component={FavPage} />\r\n      <Route path=\"/login\" component={LoginPage} />\r\n    </Switch>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport Routes from \"./Routes\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <div className=\"nav-bar\">\r\n        <NavLink className=\"link\" activeClassName=\"active\" exact to=\"/\">\r\n          Inicio\r\n        </NavLink>\r\n        <NavLink className=\"link\" activeClassName=\"active\" to=\"/favs\">\r\n          Favoritos\r\n        </NavLink>\r\n        <NavLink className=\"link\" activeClassName=\"active\" to=\"/login\">\r\n          Login\r\n        </NavLink>\r\n      </div>\r\n      <Routes />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { createStore, combineReducers, compose, applyMiddleware } from \"redux\";\r\nimport userReducer, { restoreSessionAction } from \"./userDuck\";\r\nimport charsReducer, { getCharactersAction } from \"./charsDuck\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nlet rootReducer = combineReducers({\r\n  user: userReducer,\r\n  characters: charsReducer,\r\n});\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport default function generateStore() {\r\n  let store = createStore(\r\n    rootReducer,\r\n    composeEnhancers(applyMiddleware(thunk))\r\n  );\r\n  getCharactersAction()(store.dispatch, store.getState);\r\n  restoreSessionAction()(store.dispatch);\r\n  return store;\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { BrowserRouter, withRouter } from \"react-router-dom\";\r\nimport \"font-awesome/css/font-awesome.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport generateStore from \"./redux/store\";\r\nimport ApolloClient from \"apollo-boost\";\r\nimport { ApolloProvider } from \"react-apollo\";\r\n\r\nlet store = generateStore();\r\n\r\nlet client = new ApolloClient({\r\n  uri: \"https://rickandmortyapi.com/graphql\",\r\n});\r\n\r\nlet WithRouter = () => (\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>\r\n);\r\nlet WithStore = () => (\r\n  <Provider store={store}>\r\n    <WithRouter />\r\n  </Provider>\r\n);\r\nlet WithApollo = () => (\r\n  <ApolloProvider client={client}>\r\n    <WithStore />\r\n  </ApolloProvider>\r\n);\r\n\r\nReactDOM.render(<WithStore />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"card_container__198sF\",\"card\":\"card_card__2gIgj\",\"name\":\"card_name__7STOH\",\"actions\":\"card_actions__24r4a\",\"left\":\"card_left__3JyHP\",\"right\":\"card_right__1Mg18\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"home_container__3Pfrv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"favs_container__B7J0p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"login_container__2j8Zr\"};"],"sourceRoot":""}